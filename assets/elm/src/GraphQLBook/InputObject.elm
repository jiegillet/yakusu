-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GraphQLBook.InputObject exposing (..)

import GraphQLBook.Interface
import GraphQLBook.Object
import GraphQLBook.Scalar
import GraphQLBook.ScalarCodecs
import GraphQLBook.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildInputPosition :
    InputPositionRequiredFields
    -> (InputPositionOptionalFields -> InputPositionOptionalFields)
    -> InputPosition
buildInputPosition required fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { group = required.group, id = optionals.id, x = required.x, y = required.y }


type alias InputPositionRequiredFields =
    { group : Int
    , x : Int
    , y : Int
    }


type alias InputPositionOptionalFields =
    { id : OptionalArgument GraphQLBook.ScalarCodecs.Id }


{-| Type for the InputPosition input object.
-}
type alias InputPosition =
    { group : Int
    , id : OptionalArgument GraphQLBook.ScalarCodecs.Id
    , x : Int
    , y : Int
    }


{-| Encode a InputPosition into a value that can be used as an argument.
-}
encodeInputPosition : InputPosition -> Value
encodeInputPosition input =
    Encode.maybeObject
        [ ( "group", Encode.int input.group |> Just ), ( "id", (GraphQLBook.ScalarCodecs.codecs |> GraphQLBook.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "x", Encode.int input.x |> Just ), ( "y", Encode.int input.y |> Just ) ]


buildInputTranslation :
    InputTranslationRequiredFields
    -> (InputTranslationOptionalFields -> InputTranslationOptionalFields)
    -> InputTranslation
buildInputTranslation required fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { blob = required.blob, bookId = required.bookId, id = optionals.id, pageId = required.pageId, text = required.text }


type alias InputTranslationRequiredFields =
    { blob : List InputPosition
    , bookId : GraphQLBook.ScalarCodecs.Id
    , pageId : GraphQLBook.ScalarCodecs.Id
    , text : String
    }


type alias InputTranslationOptionalFields =
    { id : OptionalArgument GraphQLBook.ScalarCodecs.Id }


{-| Type for the InputTranslation input object.
-}
type alias InputTranslation =
    { blob : List InputPosition
    , bookId : GraphQLBook.ScalarCodecs.Id
    , id : OptionalArgument GraphQLBook.ScalarCodecs.Id
    , pageId : GraphQLBook.ScalarCodecs.Id
    , text : String
    }


{-| Encode a InputTranslation into a value that can be used as an argument.
-}
encodeInputTranslation : InputTranslation -> Value
encodeInputTranslation input =
    Encode.maybeObject
        [ ( "blob", (encodeInputPosition |> Encode.list) input.blob |> Just ), ( "bookId", (GraphQLBook.ScalarCodecs.codecs |> GraphQLBook.Scalar.unwrapEncoder .codecId) input.bookId |> Just ), ( "id", (GraphQLBook.ScalarCodecs.codecs |> GraphQLBook.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "pageId", (GraphQLBook.ScalarCodecs.codecs |> GraphQLBook.Scalar.unwrapEncoder .codecId) input.pageId |> Just ), ( "text", Encode.string input.text |> Just ) ]
